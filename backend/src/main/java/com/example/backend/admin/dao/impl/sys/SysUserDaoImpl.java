package com.example.backend.admin.dao.impl.sys;import com.example.backend.auth.hash.MD5HashServiceImpl;import com.example.backend.admin.dao.ISysUserDao;import com.example.backend.global.Utils;import com.example.common.base.Cred;import com.example.common.domain.sys.SysUser;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.jdbc.core.BeanPropertyRowMapper;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;import org.springframework.jdbc.core.simple.SimpleJdbcCall;import org.springframework.stereotype.Repository;import java.util.ArrayList;import java.util.List;import java.util.Map;@Repositorypublic class SysUserDaoImpl implements ISysUserDao {    private JdbcTemplate jdbcTemplate;    public SysUserDaoImpl(JdbcTemplate jdbcTemplate) {        this.jdbcTemplate = jdbcTemplate;    }    @Autowired    private MD5HashServiceImpl md5HashService;    @Override    public List<SysUser> getlist(Cred cred, SysUser sysUser) throws Exception {        List<SysUser> resultData = new ArrayList<>();        try {            SimpleJdbcCall simpleJdbcCall = new SimpleJdbcCall(this.jdbcTemplate);            MapSqlParameterSource params = new MapSqlParameterSource();            simpleJdbcCall.withProcedureName("SysUserGetList")                    .returningResultSet("SysUser", BeanPropertyRowMapper.newInstance(SysUser.class));            params.addValue("UserId", cred.getUserId())                    .addValue("Status", sysUser.getStatus() == null ? 0 : sysUser.getStatus());            Map<String, Object> out = simpleJdbcCall.execute(params);            List<SysUser> listUser = (List<SysUser>) out.get("SysUser");            if(listUser != null) {                resultData = listUser;            }        } catch (Exception ex) {            throw Utils.processException(ex);        }        return resultData;    }    @Override    public void insert(Cred cred, SysUser user) throws Exception {        try {            SimpleJdbcCall simpleJdbcCall = new SimpleJdbcCall(this.jdbcTemplate);            MapSqlParameterSource params = new MapSqlParameterSource();            simpleJdbcCall.withProcedureName("SysUserInsert");            params.addValue("SysUserId", user.getSysUserId());            params.addValue("Password", md5HashService.hashMD5(user.getPassword()));            params.addValue("UserName", user.getUserName());            params.addValue("Role", user.getRole());            params.addValue("Status", user.getStatus());            params.addValue("Remarks", user.getRemarks());            simpleJdbcCall.execute(params);        } catch (Exception ex) {            throw Utils.processException(ex);        }    }    @Override    public SysUser getByUserID(Cred cred, String userId) throws Exception {        SysUser user = new SysUser();        String userIdLogin = cred.getUserId();        try {            SimpleJdbcCall simpleJdbcCall = new SimpleJdbcCall(this.jdbcTemplate);            MapSqlParameterSource params = new MapSqlParameterSource();            simpleJdbcCall.withProcedureName("SysUserGetByUserId").returningResultSet("SysUser", BeanPropertyRowMapper.newInstance(SysUser.class));            params.addValue("SysUserId", userId);            Map<String, Object> out = simpleJdbcCall.execute(params);            List<SysUser> sysUsers = (List<SysUser>) out.get("SysUser");            if (sysUsers.size() > 0) {                user = sysUsers.get(0);            }        } catch (Exception ex) {            throw Utils.processException(ex);        }        return user;    }    @Override    public void delete(Cred cred, SysUser user) throws Exception {        try {            SimpleJdbcCall simpleJdbcCall = new SimpleJdbcCall(this.jdbcTemplate);            MapSqlParameterSource params = new MapSqlParameterSource();            simpleJdbcCall.withProcedureName("SysUserDelete");            params.addValue("SysUserId", user.getSysUserId());            simpleJdbcCall.execute(params);        } catch (Exception ex) {            throw Utils.processException(ex);        }    }}